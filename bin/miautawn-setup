#!/bin/bash

set -e # exit immediately on failed commands

################
# COLOUR CODES #
################
NC='\033[0m'
RED='\033[00;31m'
GREEN='\033[00;32m'
BLUE='\033[00;34m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
LBLUE='\033[01;34m'

#######################
# IMPORTANT VARIABLES #
#######################
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config/}/miautawn-setup"
LOG_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/miautawn-setup"
SETUP_DIR="$HOME/.miautawn-setup"
USER_SCRIPTS_DIR="$HOME/.local/bin"

SETUP_CONFIG="$CONFIG_DIR/settings.conf"
SETUP_LOG="$LOG_DIR/log"
#############
# FUNCTIONS #
#############
function __log() {
    case $1 in
    INFO)
        echo -e "${LGREEN}$2${NC}"
        ;;

    DEBUG)
        echo -e "${LBLUE}$2${NC}"
        ;;

    ERROR)
        echo -e "${LRED}$2${NC}"
        ;;
    *)
        echo $2
    esac

    echo "$1: $2" >> $SETUP_LOG
}

function __cmd() {
    echo ">> $1:" >> $SETUP_LOG
    if eval $1 >> $SETUP_LOG 2>&1; then
        return 0
    fi
    __log ERROR "Something went wrong! Check the logs at $SETUP_LOG"
    return 1
}

function arch_setup() {
    __log DEBUG "Updating package index..."
    __cmd "sudo pacman -Sy --noconfirm"

    # First of all - check neccessary packages are installed:
    #   * git - obviously for pulling the repos if they don't exist
    #   * ansible - for actually running ansible, duh!
    #   * python-watchdog - for ansible pretty-output stdout callback
    #   * chezmoi - for managing dotfiles (fyi: this could be installed through ansible)

    if ! pacman -Q git >/dev/null 2>&1; then
        __log DEBUG "Installing Git..."
        __cmd "sudo pacman -S --noconfirm git"
    fi

    if ! pacman -Q ansible >/dev/null 2>&1; then
        __log DEBUG "Installing Ansible..."
        __cmd "sudo pacman -S --noconfirm ansible"
    fi

    if ! pacman -Q python-watchdog >/dev/null 2>&1; then
        __log DEBUG "Installing Python-Watchdog..."
        __cmd "sudo pacman -S --noconfirm python-watchdog"
    fi

    if ! pacman -Q chezmoi >/dev/null 2>&1; then
        __log DEBUG "Installing Chezmoi..."
        __cmd "sudo pacman -S --noconfirm chezmoi"
    fi
}

function detect_os() {
  if [[ -f /etc/os-release ]]; then
    source /etc/os-release
    echo $ID
  else
    echo $(uname -s | tr '[:upper:]' '[:lower:]')
  fi
}

########
# MAIN #
########

# Create log file if it doesn't exist and clear it
if ! [[ -f $SETUP_LOG ]]; then
    mkdir -p $LOG_DIR
    touch $SETUP_LOG
fi
> $SETUP_LOG

# Check available configuration
if ! [[ -f $SETUP_CONFIG ]]; then
    __cmd "mkdir -p $CONFIG_DIR"
    __cmd "touch $SETUP_CONFIG"
fi
__cmd "source $SETUP_CONFIG"

# Prompt user for system device type if not indicated
if ! [[ -n $SYSTEM_DEVICE_TYPE ]]; then
    PS3="Select system device type: "
    options=("desktop" "laptop")
    select device_type in "${options[@]}"; do
        if [[ -n $device_type ]]; then
            __cmd "echo "SYSTEM_DEVICE_TYPE=$device_type" >> $SETUP_CONFIG"
            break
        fi
        echo "invalid option $REPLY"
    done
fi

# Prompt user for system theem if not indicated
if ! [[ -n $SYSTEM_DEVICE_TYPE ]]; then
    PS3="Select system theme: "
    options=("white" "dark")
    select system_theme in "${options[@]}"; do
        if [[ -n $device_type ]]; then
            __cmd "echo "SYSTEM_THEME=$system_theme" >> $SETUP_CONFIG"
            break
        fi
        echo "invalid option $REPLY"
    done
fi

# Make user configuration available for child processes
__cmd "source $SETUP_CONFIG"
__cmd "export SYSTEM_DEVICE_TYPE"
__cmd "export SYSTEM_THEME"

DETECTED_OS=$(detect_os)
__log INFO "STEP 1. Running OS setup for: $DETECTED_OS"
case $DETECTED_OS in
arch)
    arch_setup;;
*)
    __log ERROR "Unsupported OS: '$DETECTED_OS' \nExiting..."
    exit 1
esac

__log INFO "STEP 2. Replicating System Setup..."
if ! [[ -d $SETUP_DIR ]]; then
    __log DEBUG "Cloning miautawn-setup repo..."
    __cmd "git clone --recurse-submodules https://github.com/Miautawn/ansible-quicktest $SETUP_DIR"
else
    __log DEBUG "Updating miautawn-setup repo..."
    __cmd "git -C $SETUP_DIR pull"
fi
ansible-playbook "$SETUP_DIR/hello.yaml" "$@"

__log INFO "STEP 3. Replicating System Configuration..."
if ! [[ -d $(chezmoi source-path) ]]; then
    __log DEBUG "Cloning miautawn-dotfiles repo..."
    chezmoi init https://github.com/Miautawn/test-dotfiles.git
fi
__log DEBUG "Updating & Applying System Configuration..."
chezmoi update

__log INFO "STEP 4. Publishing Update Script..."
__log DEBUG "Symlinking 'miautawn-setup' to ~/.local/bin..."
__cmd "mkdir -p $USER_SCRIPTS_DIR"
__cmd "ln -sf $SETUP_DIR/bin/miautawn-setup $USER_SCRIPTS_DIR/miautawn-setup"
if ! [[ ":$PATH:" == *":$USER_SCRIPTS_DIR:"* ]]; then
    __log DEBUG "You should consider adding $USER_SCRIPTS_DIR to your PATH!"
fi

__log INFO "All Done!"






